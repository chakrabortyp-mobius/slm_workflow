name: Run Gemma3 Inference
description: Loads Gemma3Model and generates text for a prompt with minimal logging
inputs:
  - name: tokenizer_json
    type: Data
    description: Path to tokenizer JSON file
  - name: model_py
    type: Data
    description: Path to model Python code file
  - name: model_config
    type: Data
    description: Path to model config JSON file
  - name: learned_weights
    type: Data
    description: Path to learned model weights file
  - name: prompt
    type: String
    default: "the girl"
    description: Text prompt for generation
  - name: max_new_tokens
    type: Integer
    default: "64"
    description: Maximum number of tokens to generate
outputs:
  - name: generated_text
    type: Data
    description: Generated text output
implementation:
  container:
    image: nikhilv215/nesy-factory:v22
    command:
      - sh
      - -c
      - |
        set -e
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse, importlib.util, json, os, torch
        from tokenizers import Tokenizer

        def load_module_from_path(py_path, mod_name="gemma3_model"):
            spec = importlib.util.spec_from_file_location(mod_name, py_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            return module

        parser = argparse.ArgumentParser()
        parser.add_argument("--tokenizer_json", type=str, required=True)
        parser.add_argument("--model_py", type=str, required=True)
        parser.add_argument("--model_config", type=str, required=True)
        parser.add_argument("--learned_weights", type=str, required=True)
        parser.add_argument("--prompt", type=str, required=True)
        parser.add_argument("--max_new_tokens", type=int, default=64)
        parser.add_argument("--generated_text", type=str, required=True)
        args = parser.parse_args()

        device = "cuda" if torch.cuda.is_available() else "cpu"
        torch_device = torch.device(device)
        model_dtype = torch.float16 if device == "cuda" else torch.float32

        tok = Tokenizer.from_file(args.tokenizer_json)
        bos_id = tok.token_to_id("<s>") or tok.token_to_id("<bos>")
        eos_id = tok.token_to_id("</s>") or tok.token_to_id("<eos>")

        with open(args.model_config, "r", encoding="utf-8") as f:
            cfg = json.load(f)
        cfg["dtype"] = model_dtype

        mod = load_module_from_path(args.model_py, "gemma3_model")
        Gemma3Model = getattr(mod, "Gemma3Model")

        model = Gemma3Model(cfg).to(torch_device)
        state = torch.load(args.learned_weights, map_location=torch_device)
        model.load_state_dict(state, strict=True)
        model.eval()

        context_len = int(cfg.get("context_length", 2048))

        def generate_text(prompt, max_new_tokens=64):
            ids = tok.encode(prompt).ids
            if bos_id is not None:
                ids = [bos_id] + ids
            x = torch.tensor([ids], dtype=torch.long, device=torch_device)

            for _ in range(max_new_tokens):
                with torch.no_grad():
                    logits = model(x)[0]
                next_id = int(torch.argmax(logits[0, -1]).item())
                ids.append(next_id)

                if eos_id is not None and next_id == eos_id:
                    break

                if len(ids) > context_len:
                    ids = ids[-context_len:]
                x = torch.tensor([ids], dtype=torch.long, device=torch_device)

            dec_ids = ids[1:] if (bos_id is not None and len(ids) and ids[0] == bos_id) else ids
            return tok.decode(dec_ids)

        out_text = generate_text(args.prompt, args.max_new_tokens)
        print(out_text)

        os.makedirs(os.path.dirname(args.generated_text), exist_ok=True)
        with open(args.generated_text, "w", encoding="utf-8") as f:
            f.write(out_text)

        print(f"Generated text saved at {args.generated_text}")
    args:
      - --tokenizer_json
      - {inputPath: tokenizer_json}
      - --model_py
      - {inputPath: model_py}
      - --model_config
      - {inputPath: model_config}
      - --learned_weights
      - {inputPath: learned_weights}
      - --prompt
      - {inputValue: prompt}
      - --max_new_tokens
      - {inputValue: max_new_tokens}
      - --generated_text
      - {outputPath: generated_text}
