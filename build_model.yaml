name: Build Gemma3 Model (Init)
description: Builds an untrained Gemma3Model from tokenizer vocab and a layer pattern, prints a summary, and saves initial weights + config.
inputs:
  - name: tokenizer_json
    type: Model
  - name: n_layers
    type: Integer
    default: "6"
  - name: layer_pattern
    type: String
    default: "S*3,F*1,S*2"
outputs:
  - name: model_weights
    type: Model
  - name: model_config
    type: Data
  - name: model_summary
    type: Data
implementation:
  container:
    image: python:3.9
    command:
      - python3
      - -u
      - -c
      - |
        import os
        os.system('pip install torch tokenizers')
        
        import argparse, json, os, sys
        import torch
        import torch.nn as nn
        import torch.nn.functional as F
        from tokenizers import Tokenizer

        def pattern_to_layers(pattern: str, n_layers: int):
            def norm(tok: str) -> str:
                t = tok.strip().lower()
                if t in ("s", "sliding", "sliding_attention"):
                    return "sliding_attention"
                if t in ("f", "full", "full_attention"):
                    return "full_attention"
                raise ValueError("Unknown layer type token: " + tok)

            blocks = []
            for part in pattern.split(","):
                part = part.strip()
                if not part:
                    continue
                if "*" in part:
                    t_raw, c_raw = part.split("*", 1)
                    t = norm(t_raw)
                    try:
                        c = int(c_raw)
                    except Exception:
                        raise ValueError(f"Invalid count in block '{part}'")
                    if c <= 0:
                        raise ValueError(f"Count must be > 0 in block '{part}'")
                else:
                    t = norm(part)
                    c = 1
                blocks.append((t, c))

            layer_list = []
            for t, c in blocks:
                layer_list.extend([t] * c)

            if len(layer_list) != n_layers:
                raise ValueError(
                    f"Pattern expands to {len(layer_list)} layers, but n_layers={n_layers}."
                )
            return layer_list

        def compute_rope_params(head_dim, theta_base=10_000.0, context_length=4096, dtype=torch.float32):
            assert head_dim % 2 == 0
            inv_freq = 1.0 / (theta_base ** (torch.arange(0, head_dim, 2, dtype=dtype) / head_dim))
            positions = torch.arange(context_length, dtype=dtype)
            angles = positions.unsqueeze(1) * inv_freq.unsqueeze(0)
            angles = torch.cat((angles, angles), dim=1)
            return torch.cos(angles), torch.sin(angles)

        def apply_rope(x, cos, sin):
            *_, seq_len, head_dim = x.size()
            x1 = x[..., :head_dim//2]
            x2 = x[..., head_dim//2:]
            cos_seq = cos[:seq_len, :].unsqueeze(0).unsqueeze(0)
            sin_seq = sin[:seq_len, :].unsqueeze(0).unsqueeze(0)
            rotated = torch.cat((-x2, x1), dim=-1)
            x_out = (x * cos_seq) + (rotated * sin_seq)
            return x_out.to(dtype=x.dtype)

        class RMSNorm(nn.Module):
            def __init__(self, emb_dim, eps=1e-6, bias=False):
                super().__init__()
                self.eps = eps
                self.scale = nn.Parameter(torch.zeros(emb_dim))
                self.shift = nn.Parameter(torch.zeros(emb_dim)) if bias else None

            def forward(self, x):
                orig_dtype = x.dtype
                x_f = x.float()
                var = x_f.pow(2).mean(dim=-1, keepdim=True)
                x_norm = x_f * torch.rsqrt(var + self.eps)
                out = x_norm * (1.0 + self.scale.float())
                if self.shift is not None:
                    out = out + self.shift.float()
                return out.to(orig_dtype)

        class GroupedQueryAttention(nn.Module):
            def __init__(self, d_in, num_heads, num_kv_groups, head_dim=None, qk_norm=False, query_pre_attn_scalar=None, dtype=None):
                super().__init__()
                assert num_heads % num_kv_groups == 0
                self.num_heads = num_heads
                self.num_kv_groups = num_kv_groups
                self.group_size = num_heads // num_kv_groups
                self.head_dim = head_dim if head_dim is not None else d_in // num_heads
                self.scaling = (query_pre_attn_scalar ** -0.5) if (query_pre_attn_scalar is not None) else (self.head_dim ** -0.5)
                self.W_query = nn.Linear(d_in, num_heads * self.head_dim, bias=False, dtype=dtype)
                self.W_key = nn.Linear(d_in, num_kv_groups * self.head_dim, bias=False, dtype=dtype)
                self.W_value = nn.Linear(d_in, num_kv_groups * self.head_dim, bias=False, dtype=dtype)
                self.out_proj = nn.Linear(num_heads * self.head_dim, d_in, bias=False, dtype=dtype)
                if qk_norm:
                    self.q_norm = RMSNorm(self.head_dim)
                    self.k_norm = RMSNorm(self.head_dim)
                else:
                    self.q_norm = None
                    self.k_norm = None

            def forward(self, x, cos, sin, mask=None):
                B, T, _ = x.shape
                q = self.W_query(x).view(B, T, self.num_heads, self.head_dim).transpose(1, 2)
                k = self.W_key(x).view(B, T, self.num_kv_groups, self.head_dim).transpose(1, 2)
                v = self.W_value(x).view(B, T, self.num_kv_groups, self.head_dim).transpose(1, 2)
                if self.q_norm is not None:
                    q = self.q_norm(q)
                if self.k_norm is not None:
                    k = self.k_norm(k)
                q = apply_rope(q, cos, sin)
                k = apply_rope(k, cos, sin)
                k = k.repeat_interleave(self.group_size, dim=1)
                v = v.repeat_interleave(self.group_size, dim=1)
                attn_scores = torch.matmul(q, k.transpose(-2, -1)) * self.scaling
                if mask is not None:
                    attn_scores = attn_scores.masked_fill(~mask.unsqueeze(0).unsqueeze(0), float('-inf'))
                attn_probs = torch.softmax(attn_scores, dim=-1)
                out = torch.matmul(attn_probs, v)
                out = out.transpose(1, 2).contiguous().view(B, T, self.num_heads * self.head_dim)
                out = self.out_proj(out)
                return out

        class FeedForward(nn.Module):
            def __init__(self, cfg):
                super().__init__()
                emb_dim = cfg["emb_dim"]
                hidden_dim = cfg["hidden_dim"]
                dtype = cfg["dtype"]
                self.fc1 = nn.Linear(emb_dim, hidden_dim, bias=False, dtype=dtype)
                self.fc2 = nn.Linear(emb_dim, hidden_dim, bias=False, dtype=dtype)
                self.fc3 = nn.Linear(hidden_dim, emb_dim, bias=False, dtype=dtype)

            def forward(self, x):
                x_fc1 = self.fc1(x)
                x_fc2 = self.fc2(x)
                x = F.gelu(x_fc1) * x_fc2
                x = self.fc3(x)
                return x

        class TransformerBlock(nn.Module):
            def __init__(self, cfg, layer_type):
                super().__init__()
                self.layer_type = layer_type
                self.attn = GroupedQueryAttention(
                    d_in=cfg["emb_dim"],
                    num_heads=cfg["n_heads"],
                    num_kv_groups=cfg.get("n_kv_groups", 1),
                    head_dim=cfg["head_dim"],
                    qk_norm=cfg.get("qk_norm", False),
                    query_pre_attn_scalar=cfg.get("query_pre_attn_scalar", None),
                    dtype=cfg["dtype"]
                )
                self.input_norm = RMSNorm(cfg["emb_dim"], eps=cfg.get("rms_norm_eps", 1e-6))
                self.post_attn_norm = RMSNorm(cfg["emb_dim"], eps=cfg.get("rms_norm_eps", 1e-6))
                self.pre_ff_norm = RMSNorm(cfg["emb_dim"], eps=cfg.get("rms_norm_eps", 1e-6))
                self.post_ff_norm = RMSNorm(cfg["emb_dim"], eps=cfg.get("rms_norm_eps", 1e-6))
                self.ffn = FeedForward(cfg)

            def forward(self, x, cos, sin, mask=None):
                residual = x
                x = self.input_norm(x)
                attn_out = self.attn(x, cos, sin, mask)
                x = self.post_attn_norm(attn_out + residual)
                residual = x
                x = self.pre_ff_norm(x)
                ff_out = self.ffn(x)
                x = self.post_ff_norm(ff_out + residual)
                return x

        class Gemma3Model(nn.Module):
            def __init__(self, cfg):
                super().__init__()
                self.cfg = cfg
                vocab_size = cfg["vocab_size"]
                emb_dim = cfg["emb_dim"]

                self.token_emb = nn.Embedding(vocab_size, emb_dim, dtype=cfg["dtype"])
                self.blocks = nn.ModuleList([
                    TransformerBlock(cfg, layer_type=cfg["layer_types"][i])
                    for i in range(cfg["n_layers"])
                ])
                self.final_norm = RMSNorm(emb_dim, eps=cfg.get("rms_norm_eps", 1e-6))
                self.out_head = nn.Linear(emb_dim, vocab_size, bias=False, dtype=cfg["dtype"])

                self.cos_global, self.sin_global = compute_rope_params(
                    head_dim=cfg["head_dim"],
                    theta_base=cfg["rope_base"],
                    context_length=cfg["context_length"],
                    dtype=torch.float32,
                )
                self.cos_local, self.sin_local = compute_rope_params(
                    head_dim=cfg["head_dim"],
                    theta_base=cfg["rope_local_base"],
                    context_length=cfg["sliding_window"],
                    dtype=torch.float32,
                )

                self._init_weights()

            def _init_weights(self):
                init_std = self.cfg.get("initializer_range", 0.02)
                for module in self.modules():
                    if isinstance(module, nn.Linear):
                        module.weight.data.normal_(0.0, init_std)
                        if module.bias is not None:
                            module.bias.data.zero_()
                    elif isinstance(module, nn.Embedding):
                        module.weight.data.normal_(0.0, init_std)
                    elif isinstance(module, RMSNorm):
                        if hasattr(module, 'shift') and module.shift is not None:
                            module.shift.data.zero_()

            def _ensure_rope_on_device(self, device):
                if self.cos_global.device != device:
                    self.cos_global = self.cos_global.to(device)
                    self.sin_global = self.sin_global.to(device)
                if self.cos_local.device != device:
                    self.cos_local = self.cos_local.to(device)
                    self.sin_local = self.sin_local.to(device)

            def forward(self, input_ids: torch.LongTensor, labels: torch.LongTensor = None):
                x = self.token_emb(input_ids).to(self.cfg["dtype"])
                B, T, _ = x.size()
                device = x.device

                self._ensure_rope_on_device(device)

                mask_full = torch.tril(torch.ones((T, T), dtype=torch.bool, device=device))
                window = self.cfg["sliding_window"]
                mask_sliding = torch.zeros((T, T), dtype=torch.bool, device=device)
                for i in range(T):
                    start = max(0, i - window + 1)
                    mask_sliding[i, start:i+1] = True

                for i, block in enumerate(self.blocks):
                    layer_type = self.cfg["layer_types"][i]
                    if layer_type == "sliding_attention":
                        cos, sin, mask = self.cos_local, self.sin_local, mask_sliding
                    else:
                        cos, sin, mask = self.cos_global, self.sin_global, mask_full
                    x = block(x, cos=cos, sin=sin, mask=mask)

                x = self.final_norm(x)
                logits = self.out_head(x)

                loss = None
                if labels is not None:
                    loss = F.cross_entropy(
                        logits.view(-1, logits.size(-1)),
                        labels.view(-1),
                        reduction="mean"
                    )
                return logits, loss

            @torch.no_grad()
            def generate(self, input_ids, max_new_tokens=50, temperature=1.0, top_k=None, eos_token_id=None):
                self.eval()
                device = input_ids.device
                self._ensure_rope_on_device(device)

                for _ in range(max_new_tokens):
                    input_cond = input_ids[:, -self.cfg["context_length"]:]
                    logits, _ = self.forward(input_cond)
                    logits = logits[:, -1, :] / max(temperature, 1e-8)

                    if top_k is not None:
                        v, ix = torch.topk(logits, top_k)
                        mask = torch.full_like(logits, float('-inf'))
                        mask.scatter_(1, ix, v)
                        logits = mask

                    probs = torch.softmax(logits, dim=-1)
                    next_token = torch.multinomial(probs, num_samples=1)
                    input_ids = torch.cat([input_ids, next_token], dim=1)

                    if eos_token_id is not None and (next_token == eos_token_id).all():
                        break
                return input_ids

        def main():
            ap = argparse.ArgumentParser()
            ap.add_argument("--tokenizer-json", required=True)
            ap.add_argument("--n-layers", type=int, required=True)
            ap.add_argument("--layer-pattern", required=True)
            ap.add_argument("--model-weights", required=True)
            ap.add_argument("--model-config", required=True)
            ap.add_argument("--model-summary", required=True)
            args = ap.parse_args()

            tok = Tokenizer.from_file(args.tokenizer_json)
            vocab_size = tok.get_vocab_size()

            layer_types = pattern_to_layers(args.layer_pattern, args.n_layers)

            device = "cuda" if torch.cuda.is_available() else "cpu"
            model_dtype = torch.float16 if device == "cuda" else torch.float32

            GEMMA3_CONFIG = {
                "vocab_size": vocab_size,
                "context_length": 2048,
                "emb_dim": 640,
                "n_heads": 4,
                "n_layers": args.n_layers,
                "hidden_dim": 2048,
                "head_dim": 128,
                "qk_norm": True,
                "n_kv_groups": 1,
                "rope_local_base": 10000.0,
                "rope_base": 1000000.0,
                "sliding_window": 512,
                "layer_types": layer_types,
                "dtype": model_dtype,
                "query_pre_attn_scalar": 128,
                "initializer_range": 0.02,
                "rms_norm_eps": 1e-6,
            }

            model = Gemma3Model(GEMMA3_CONFIG).to(device)
            model.cos_global = model.cos_global.to(device)
            model.sin_global = model.sin_global.to(device)
            model.cos_local = model.cos_local.to(device)
            model.sin_local = model.sin_local.to(device)
            model.eval()

            print("Model Summary")
            print(model)
            total_params = sum(p.numel() for p in model.parameters())
            trainable_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
            #print(f"Total params {total_params:,} | Trainable {trainable_params:,}")

            os.makedirs(os.path.dirname(args.model_weights) or ".", exist_ok=True)
            os.makedirs(os.path.dirname(args.model_config) or ".", exist_ok=True)
            os.makedirs(os.path.dirname(args.model_summary) or ".", exist_ok=True)

            torch.save(model.state_dict(), args.model_weights)
            with open(args.model_config, "w", encoding="utf-8") as f:
                json.dump(GEMMA3_CONFIG, f, indent=2)
            with open(args.model_summary, "w", encoding="utf-8") as f:
                f.write(str(model) + "\n")
                f.write("Total params " + str(total_params) + " | Trainable " + str(trainable_params) + "\n")

            print("Model initialized and saved.")

        if __name__ == "__main__":
            main()
    args:
      - --tokenizer-json
      - {inputPath: tokenizer_json}
      - --n-layers
      - {inputValue: n_layers}
      - --layer-pattern
      - {inputValue: layer_pattern}
      - --model-weights
      - {outputPath: model_weights}
      - --model-config
      - {outputPath: model_config}
      - --model-summary
      - {outputPath: model_summary}
