name: Dataset Text CDN Uploader
description: Uploads the exported text file from the Dataset Text Exporter to a CDN and returns the public URL.
inputs:
  - name: exported_text
    type: Data
  - name: bearer_token
    type: string
    description: "Bearer token for authentication."
outputs:
  - name: cdn_url_out
    type: string
    description: "CDN URL where the uploaded file is accessible."
implementation:
  container:
    image: python:3.9-slim
    command:
      - sh
      - -c
      - |
        apt-get update && apt-get install -y curl
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import subprocess
        import json
        import os

        parser = argparse.ArgumentParser(description="Upload the exported text file to CDN.")
        parser.add_argument('--exported_text', type=str, required=True, 
                           help='Path to the exported text file.')
        parser.add_argument('--bearer_token', type=str, required=True, 
                           help='Bearer token for authentication.')
        parser.add_argument('--cdn_url_out', type=str, required=True, 
                           help='Path to save the resulting CDN URL.')
        args = parser.parse_args()

        bearer_token = args.bearer_token

        upload_url = "https://igs.gov-cloud.ai/mobius-content-service/v1.0/content/upload?filePath=MPQE1&contentTags=test"

        def upload_file_to_cdn(file_path, output_url_path):
            # Uploads the file to CDN and saves the resulting URL
            
            if not os.path.exists(file_path):
                raise FileNotFoundError(f"File not found: {file_path}")
            
            file_size = os.path.getsize(file_path)
            if file_size == 0:
                raise ValueError("File is empty")
            
            original_filename = os.path.basename(file_path)
            
            print(f"Uploading file: {file_path}")
            print(f"File size: {file_size:,} bytes ({file_size/1024/1024:.2f} MB)")
            
            curl_command = [
                "curl",
                "--location", upload_url,
                "--header", f"Authorization: Bearer {bearer_token}",
                "--form", f"file=@{file_path}",
                "--fail",
                "--show-error"
            ]
            
            print(f"Executing upload...")
            
            try:
                process = subprocess.run(
                    curl_command,
                    capture_output=True,
                    check=True
                )
                
                response_text = process.stdout.decode('utf-8')
                print(f"Upload successful!")
                
                response_json = json.loads(response_text)
                relative_cdn_url = response_json.get("cdnUrl")
                
                if not relative_cdn_url:
                    raise ValueError("CDN response missing 'cdnUrl' field")
                
                full_cdn_url = f"https://cdn-new.gov-cloud.ai{relative_cdn_url}"
                print(f"File available at: {full_cdn_url}")
                
                output_dir = os.path.dirname(output_url_path)
                if output_dir:
                    os.makedirs(output_dir, exist_ok=True)
                
                with open(output_url_path, "w") as f:
                    f.write(full_cdn_url)
                
                print(f"CDN URL saved to: {output_url_path}")
                return full_cdn_url
                
            except subprocess.CalledProcessError as e:
                print("Upload failed!")
                print(f"Exit code: {e.returncode}")
                print(f"Error output: {e.stderr.decode('utf-8')}")
                raise
            except json.JSONDecodeError as e:
                print("Failed to parse server response as JSON")
                print(f"Response was: {process.stdout.decode('utf-8')}")
                raise
            except Exception as e:
                print(f"Unexpected error: {e}")
                raise

        try:
            cdn_url = upload_file_to_cdn(args.exported_text, args.cdn_url_out)
            print("SUCCESS!")
            print(f"Your file is now available at: {cdn_url}")
            
        except Exception as e:
            print("UPLOAD FAILED!")
            print(f"Error: {e}")
            raise

    args:
      - --exported_text
      - {inputPath: exported_text}
      - --bearer_token
      - {inputValue: bearer_token}
      - --cdn_url_out
      - {outputPath: cdn_url_out}
